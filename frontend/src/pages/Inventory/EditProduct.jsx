import { useEffect, useMemo, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useForm, useFieldArray } from "react-hook-form";
import { toast } from "react-toastify";
import { FiUpload } from "react-icons/fi";
import api from "../../api";
import { useAuth } from "../../context/AuthContext"; // ⭐

// ───────── static helpers ─────────────────────────────────
const AVAIL = [
  { id: "inStock", label: "In-stock" },
  { id: "restocking", label: "Restocking soon" },
  { id: "inactive", label: "Mark as inactive" },
];

const META = [
  { title: "General", body: "Edit base information." },
  { title: "Product Variants", body: "Variants that affect stock-keeping." },
  { title: "Product availability", body: "Inventory status & IDs." },
  { title: "Description", body: "Images and long description." },
];

const L = ({ label, children }) => (
  <label className="grid text-sm gap-1">
    <span className="font-medium text-gray-700">{label}</span>
    {children}
  </label>
);

// ───────── component ──────────────────────────────────────
export default function EditProduct() {
  const { id } = useParams();
  const nav = useNavigate();
  const { user } = useAuth(); // ⬅️ LIVE user
  const USERROLE = user?.userType || "Customer";

  const [brandOptions, setBrandOptions] = useState([]);
  const [categoryOptions, setCategoryOptions] = useState([]);

  /* ---------- permissions – calculate once per render ----- */
  const { canEdit, canSave } = useMemo(() => {
    const PERM = {
      General: ["Admin", "SalesRep"],
      Variants: ["Admin", "Manager"],
      Availability: ["Admin", "Manager"],
      Description: ["Admin", "SalesRep"],
    };
    const _canEdit = (section) => PERM[section]?.includes(USERROLE);
    const _canSave = ["Admin", "Manager", "SalesRep"].includes(USERROLE);
    return { canEdit: _canEdit, canSave: _canSave };
  }, [USERROLE]);

  /* ---------- RHF ---------------------------------------- */
  const {
    register,
    handleSubmit,
    watch,
    control,
    reset,
    setValue,
    formState: { errors, isSubmitting },
  } = useForm({
    mode: "onTouched",
    defaultValues: {
      productName: "",
      productCondition: "New",
      productCategory: "",
      brand: "",
      baseRam: "",
      baseStorage: "",
      baseCPU: "",
      costPrice: "",
      sellingPrice: "",
      quantity: 1,
      availability: "inStock",
      status: "Status",
      reorderLevel: 10,
      stockLocation: "",
      supplier: "",
      productIdMode: "Autogenerated",
      productId: "",
      description: "",
      serialNumbers: "",
      variants: [{ attribute: "", value: "", inputCost: "" }],
      existingImages: [],
      newImages: [],
      removedImages: [],
    },
  });

  const { fields: variantF, append: addVariant } = useFieldArray({
    control,
    name: "variants",
  });

  /* ---------- fetch product once ------------------------- */
  useEffect(() => {
    api
      .get(`/api/products/${id}`)
      .then(({ data }) => {
        reset({
          productName: data.productName,
          productCondition: data.productCondition,
          productCategory: data.productCategory,
          brand: data.brand,
          ...data.baseSpecs.reduce((acc, item, index) => {
            acc[`baseRam_${index}`] = item.baseRam;
            acc[`baseStorage_${index}`] = item.baseStorage;
            acc[`baseCPU_${index}`] = item.baseCPU;
            acc[`serialNumbers_${index}`] = item.serialNumber;
            return acc;
          }, {}),

          costPrice: data.costPrice,
          sellingPrice: data.sellingPrice,
          quantity: data.quantity,
          availability: data.availability,
          status: data.status,
          reorderLevel: data.reorderLevel,
          stockLocation: data.stockLocation,
          supplier: data.supplier,
          productIdMode: data.productId ? "Manual" : "Autogenerated",
          productId: data.productId || "",
          description: data.description,
          variants: data.variants?.length
            ? data.variants
            : [{ attribute: "", value: "", inputCost: "" }],
          existingImages: data.images || [],
          newImages: [],
          removedImages: [],
        });

        // Fetch all brands and categories (assuming from backend)
        api.get("/api/products/brands").then((res) => {
          setBrandOptions(res.data || []);
        });
        api.get("/api/products/categories").then((res) => {
          setCategoryOptions(res.data || []);
        });
      })
      .catch((err) => {
        console.error(err);
        toast.error("Could not load product.");
        nav("/inventory");
      });
  }, [id, reset, nav]);

  /* ---------- image helpers ------------------------------ */
  const addNewImages = (files) =>
    setValue("newImages", [...watch("newImages"), ...files]);
  const removeExisting = (url) => {
    setValue(
      "existingImages",
      watch("existingImages").filter((u) => u !== url)
    );
    setValue("removedImages", [...watch("removedImages"), url]);
  };
  const removeNew = (idx) => {
    const arr = [...watch("newImages")];
    arr.splice(idx, 1);
    setValue("newImages", arr);
  };

  /* ---------- product-ID toggle -------------------------- */
  const pidMode = watch("productIdMode");
  useEffect(() => {
    if (pidMode === "Autogenerated") setValue("productId", "");
  }, [pidMode, setValue]);

  /* ---------- submit (respect permissions) --------------- */
  const onSubmit = async (data) => {
    if (!canSave) return;

    const fd = new FormData();

    const baseSpecs = [];
    for (let i = 0; i < data.quantity; i++) {
      baseSpecs.push({
        baseRam: data[`baseRam_${i}`],
        baseStorage: data[`baseStorage_${i}`],
        baseCPU: data[`baseCPU_${i}`],
        serialNumber: data[`serialNumbers_${i}`],
      });
    }
    fd.append("baseSpecs", JSON.stringify(baseSpecs));

    /* GENERAL ---------------------------------------------------------- */
    if (canEdit("General")) {
      [
        "productName",
        "productCondition",
        "productCategory",
        "brand",
        "quantity",
        "costPrice",
        "stockLocation",
        "supplier",
      ].forEach((k) => fd.append(k, data[k] ?? ""));
    }

    /* VARIANTS --------------------------------------------------------- */
    if (canEdit("Variants")) {
      ["storageRam", "Storage"].forEach((k) => fd.append(k, data[k] ?? ""));
      fd.append("sellingPrice", Number(data.sellingPrice || 0));
      fd.append(
        "variants",
        JSON.stringify(
          data.variants.map((v) => ({
            ...v,
            inputCost: Number(v.inputCost || 0),
          }))
        )
      );
    }

    /* AVAILABILITY ----------------------------------------------------- */
    if (canEdit("Availability")) {
      [
        "availability",
        "status",
        "reorderLevel",
        "productIdMode",
        "productId",
      ].forEach((k) => fd.append(k, data[k] ?? ""));
    }

    /* DESCRIPTION ------------------------------------------------------ */
    if (canEdit("Description")) {
      fd.append("description", data.description || "");
      fd.append("removedImages", JSON.stringify(data.removedImages));
      data.newImages.forEach((f) => fd.append("images", f));
    }

    try {
      await api.put(`/api/products/${id}`, fd, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      toast.success("Product updated");
      nav("/inventory");
    } catch (err) {
      toast.error(err.response?.data?.message || "Could not update product");
      console.error(err);
    }
  };

  /* ---------- UI helpers --------------------------------- */
  const SaveButtons = () =>
    canSave && (
      <div className="mt-6 flex gap-4">
        <button
          type="button"
          onClick={() => nav(-1)}
          className="rounded border border-orange-500 px-6 py-1.5 text-orange-500"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isSubmitting}
          className="rounded bg-orange-500 px-6 py-1.5 text-white disabled:opacity-60"
        >
          {isSubmitting ? "Updating…" : "Update"}
        </button>
      </div>
    );

  const Block = ({ title, body, showButtons = false, children }) => (
    <section className="grid gap-8 md:grid-cols-[260px_1fr] pt-16 first:pt-0">
      <div>
        <h3 className="text-[17px] font-semibold">{title}</h3>
        <p className="mt-1 text-sm text-gray-600">{body}</p>
        {showButtons && <SaveButtons />}
      </div>
      <div className="space-y-8">{children}</div>
    </section>
  );

  /* disabled flags (per section) -------------------------------------- */
  const disGen = !canEdit("General");
  const disVar = !canEdit("Variants");
  const disAv = !canEdit("Availability");
  const disDesc = !canEdit("Description");

  const show = {
    General: canEdit("General"),
    Variants: canEdit("Variants"),
    Availability: canEdit("Availability"),
    Description: canEdit("Description"),
  };

  /* ================= RENDER ========================================== */
  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className="mx-auto max-w-[1150px] px-4 sm:px-6 pb-32"
    >
      {/* ───────── GENERAL ───────── */}
      {show.General && (
        <Block {...META[0]} showButtons={true}>
          <div className="grid gap-6 sm:grid-cols-2">
            <L label="Product Name">
              <input
                className="input"
                {...register("productName", { required: "Required" })}
                disabled={disGen}
              />
            </L>
            <L label="Product Condition">
              <select
                className="input"
                {...register("productCondition")}
                disabled={disGen}
              >
                <option>New</option>
                <option>UK Used</option>
                <option>Fairly Used</option>
              </select>
            </L>
          </div>

          <div className="grid gap-6 sm:grid-cols-2">
            <L label="Brand">
              <input
                className="input"
                list="brands"
                {...register("brand", { required: "Required" })}
                disabled={disGen}
              />
              <datalist id="brands">
                {brandOptions.map((b, i) => (
                  <option key={i} value={b} />
                ))}
              </datalist>
            </L>

            <L label="Product Category">
              <input
                className="input"
                list="categories"
                {...register("productCategory", { required: "Required" })}
                disabled={disGen}
              />
              <datalist id="categories">
                {categoryOptions.map((c, i) => (
                  <option key={i} value={c} />
                ))}
              </datalist>
            </L>
          </div>

          <L label="Product Quantity">
            <input
              type="number"
              min="1"
              className="input"
              {...register("quantity", { valueAsNumber: true })}
              disabled={disGen}
            />
          </L>

          {Array.from({ length: watch("quantity") || 1 }).map((_, index) => (
            <div
              key={index}
              className="grid gap-6 sm:grid-cols-2 lg:grid-cols-4"
            >
              <L label={`Base RAM (${index + 1})`}>
                <select
                  className="input"
                  {...register(`baseRam_${index}`)}
                  disabled={disGen}
                >
                  <option value="">Select RAM</option>
                  <option>8GB</option>
                  <option>16GB</option>
                  <option>32GB</option>
                </select>
              </L>

              <L label={`Base Storage (${index + 1})`}>
                <select
                  className="input"
                  {...register(`baseStorage_${index}`)}
                  disabled={disGen}
                >
                  <option value="">Select Storage</option>
                  <option>256GB</option>
                  <option>512GB</option>
                  <option>1TB</option>
                </select>
              </L>

              <L label={`Base CPU (${index + 1})`}>
                <select
                  className="input"
                  {...register(`baseCPU_${index}`)}
                  disabled={disGen}
                >
                  <option value="">Select CPU</option>
                  <option>Core i3</option>
                  <option>Core i5</option>
                  <option>Core i7</option>
                </select>
              </L>

              <L label={`Serial Number (${index + 1})`}>
                <input
                  className="input"
                  {...register(`serialNumbers_${index}`)}
                  disabled={disGen}
                />
              </L>
            </div>
          ))}

          <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            <L label="Cost Price per Unit">
              <input
                className="input"
                {...register("costPrice", {
                  valueAsNumber: true,
                  required: true,
                })}
                disabled={disGen}
              />
            </L>
            <L label="Stock Location">
              <select
                className="input"
                {...register("stockLocation")}
                disabled={disGen}
              >
                <option value="" disabled hidden>
                  Select location
                </option>
                <option>Warehouse A</option>
                <option>Component 180</option>
              </select>
            </L>
            <L label="Supplier Name">
              <input
                className="input"
                {...register("supplier")}
                disabled={disGen}
              />
            </L>
          </div>
        </Block>
      )}

      <hr className="my-16" />

      {/* ───────── VARIANTS ───────── */}
      {show.Variants && (
        <Block {...META[1]}>
          <div className="grid gap-6 sm:grid-cols-3">
            <L label="Variant RAM">
              <select
                className="input"
                {...register("storageRam")}
                disabled={disVar}
              >
                <option value="" disabled hidden>
                  Select RAM
                </option>
                <option>8GB</option>
                <option>16GB</option>
                <option>32GB</option>
              </select>
            </L>
            <L label="Variant Storage">
              <select
                className="input"
                {...register("Storage")}
                disabled={disVar}
              >
                <option value="" disabled hidden>
                  Select Storage
                </option>
                <option>256GB</option>
                <option>512GB</option>
                <option>1TB</option>
              </select>
            </L>
            <L label="Selling Price (NGN)">
              <input
                className="input"
                {...register("sellingPrice", {
                  valueAsNumber: true,
                  required: true,
                })}
                disabled={disVar}
              />
            </L>
          </div>

          <div className="flex items-center justify-between mt-6">
            <h4 className="font-medium" />
            {canEdit("Variants") && (
              <button
                type="button"
                onClick={() =>
                  addVariant({ attribute: "", value: "", inputCost: "" })
                }
                className="text-sm font-medium text-orange-500"
              >
                + Add Variant
              </button>
            )}
          </div>

          {variantF.map((v, idx) => (
            <div key={v.id} className="mb-4 grid gap-4 sm:grid-cols-3">
              <L label="Attribute">
                <input
                  className="input"
                  {...register(`variants.${idx}.attribute`)}
                  disabled={disVar}
                />
              </L>
              <L label="Value">
                <input
                  className="input"
                  {...register(`variants.${idx}.value`)}
                  disabled={disVar}
                />
              </L>
              <L label="Input Cost">
                <input
                  className="input"
                  type="number"
                  {...register(`variants.${idx}.inputCost`, {
                    valueAsNumber: true,
                  })}
                  disabled={disVar}
                />
              </L>
            </div>
          ))}
        </Block>
      )}

      <hr className="my-16" />

      {/* ───────── AVAILABILITY ───────── */}
      {show.Availability && (
        <Block {...META[2]}>
          <L label="Stock Status">
            <div className="flex flex-wrap gap-8 pt-1">
              {AVAIL.map((o) => (
                <label key={o.id} className="flex items-center gap-2 text-sm">
                  <input
                    type="radio"
                    value={o.id}
                    {...register("availability")}
                    className="accent-orange-500"
                    disabled={disAv}
                  />
                  {o.label}
                </label>
              ))}
            </div>
          </L>

          <div className="grid gap-1">
            <div className="grid gap-6 sm:grid-cols-[1fr_120px]">
              <L label="Product Status">
                <select
                  className="input"
                  {...register("status")}
                  disabled={disAv}
                >
                  <option>Status</option>
                  <option>Incoming</option>
                  <option>Archived</option>
                </select>
              </L>
              <L label="Re-order Level">
                <input
                  className="input"
                  type="number"
                  {...register("reorderLevel", { valueAsNumber: true })}
                  disabled={disAv}
                />
              </L>
            </div>
          </div>

          <div className="grid sm:grid-cols-[140px_1fr] gap-0.5">
            <select
              className="input rounded-r-none"
              {...register("productIdMode")}
              disabled={disAv}
            >
              <option>Autogenerated</option>
              <option>Manual</option>
            </select>
            <input
              className="input rounded-l-none"
              {...register("productId", { required: pidMode === "Manual" })}
              disabled={pidMode === "Autogenerated" || disAv}
              placeholder={
                pidMode === "Autogenerated"
                  ? "Generated automatically"
                  : "Enter product ID"
              }
            />
          </div>
        </Block>
      )}

      <hr className="my-16" />

      {/* ───────── DESCRIPTION ───────── */}
      {show.Description && (
        <Block {...META[3]}>
          {watch("existingImages").length > 0 && (
            <div className="mb-4 flex flex-wrap gap-4">
              {watch("existingImages").map((url) => (
                <div key={url} className="relative h-24 w-24">
                  <img
                    src={url}
                    alt=""
                    className="h-full w-full rounded object-cover"
                  />
                  {canEdit("Description") && (
                    <button
                      type="button"
                      onClick={() => removeExisting(url)}
                      className="absolute -top-2 -right-2 rounded-full bg-white p-0.5 shadow"
                    >
                      ✕
                    </button>
                  )}
                </div>
              ))}
            </div>
          )}

          {canEdit("Description") && (
            <L label="Upload Product Image">
              <label className="flex items-center gap-2 rounded border px-4 py-2 text-sm cursor-pointer">
                <FiUpload /> Upload
                <input
                  type="file"
                  multiple
                  className="hidden"
                  onChange={(e) => addNewImages(Array.from(e.target.files))}
                />
              </label>
              <p className="mt-1 text-xs text-gray-400">
                {watch("newImages").length} file(s) selected
              </p>
              {!!watch("newImages").length && (
                <ul className="mt-2 text-xs">
                  {watch("newImages").map((f, i) => (
                    <li key={i} className="flex items-center gap-2">
                      {f.name}
                      <button
                        type="button"
                        className="text-red-600"
                        onClick={() => removeNew(i)}
                      >
                        remove
                      </button>
                    </li>
                  ))}
                </ul>
              )}
            </L>
          )}

          <L label="Product Details">
            <textarea
              rows={4}
              className="input resize-none"
              {...register("description")}
              disabled={disDesc}
            />
          </L>
        </Block>
      )}

      <SaveButtons />

      {/* validation summary */}
      {Object.keys(errors).length > 0 && (
        <div className="mt-10 rounded border border-red-200 bg-red-50 p-3 text-sm text-red-700">
          {Object.values(errors).map((e, i) => (
            <p key={i}>• {e.message}</p>
          ))}
        </div>
      )}
    </form>
  );
}
