   import { useEffect, useMemo }        from "react";
   import { useNavigate }               from "react-router-dom";
   import { useForm, useFieldArray }    from "react-hook-form";
   import { toast }                     from "react-toastify";
   import { FiUpload }                  from "react-icons/fi";
   import api                           from "../../api";
   import { useAuth }                   from "../../context/AuthContext";   // <<-- HERE
   
   /* ─── static data ─── */
   const AVAIL = [
     { id:"inStock",    label:"In-stock" },
     { id:"restocking", label:"Restocking soon" },
     { id:"inactive",   label:"Mark as inactive" },
   ];
   const META = [
     { title:"General",                      body:"Add information about the product here." },
     { title:"Product Variants(Display Section)",
       body :"For products with variables, such as size, colour or specs to manage their inventory levels." },
     { title:"Product availability",
       body :"Edit inventory levels to better help you manage inventory" },
     { title:"Product Descriptions & Features",
       body :"Add attributes for this product to create and manage their inventory." },
   ];
   const Divider = () => <hr className="my-16 border-t border-gray-200" />;
   const L = ({ label, children }) => (
     <label className="grid text-sm gap-1">
       <span className="font-medium text-gray-700">{label}</span>
       {children}
     </label>
   );
   
   /* ─── component ─── */
   export default function AddProduct() {
     const nav          = useNavigate();
     const { user }     = useAuth();                       // LIVE user
     const USERROLE     = user?.userType || "Customer";
   
     /* ---- permissions rebuilt every render ---- */
     const { canEdit, canSave } = useMemo(() => {
       const PERM = {
         General     : ["Admin", "SalesRep"],
         Variants    : ["Admin", "Manager"],
         Availability: ["Admin", "Manager"],
         Description : ["Admin", "SalesRep"],
       };
       const _canEdit = (section) => PERM[section]?.includes(USERROLE);
       const _canSave = ["Admin", "Manager", "SalesRep"].includes(USERROLE);
       return { canEdit:_canEdit, canSave:_canSave };
     }, [USERROLE]);
   
     /* ---- react-hook-form ---- */
     const { register, handleSubmit, watch, control,
             setValue, getValues,
             formState:{ errors, isSubmitting } } = useForm({
       mode:"onTouched",
       defaultValues:{
         productName:"", productCondition:"New",
         productCategory:"", brand:"",
         baseRam:"", baseStorage:"", baseCPU:"",
         serialNumbers:"",
   
         quantity:1, costPrice:"", stockLocation:"", supplier:"",
   
         storageRam:"", Storage:"", sellingPrice:"",
   
         variants:[{ attribute:"", value:"", inputCost:"" }],
         availability:"inStock", status:"Status", reorderLevel:10,
         productIdMode:"Autogenerated", productId:"",
   
         images:[], description:"", features:[{ key:"", value:"" }]
       }
     });
   
     const { fields: variantF, append:addVariant } = useFieldArray({ control, name:"variants" });
     const { fields: featureF, append:addFeature } = useFieldArray({ control, name:"features" });
   
     const addImages = (files)=> setValue("images",[ ...getValues("images"), ...files ]);
   
     /* manual-ID toggle */
     const pidMode = watch("productIdMode");
     useEffect(()=>{ if(pidMode==="Autogenerated") setValue("productId",""); },[pidMode,setValue]);
   
     /* ---- SUBMIT ---- */
     const onSubmit = async (data) => {
       if (!canSave) return;                 // extra guard
   
       const fd = new FormData();
   
       if (canEdit("General")) {
         [
           "productName","productCondition","productCategory","brand",
           "baseRam","baseStorage","baseCPU","serialNumbers",
           "quantity","costPrice","stockLocation","supplier"
         ].forEach(k=>fd.append(k, data[k] ?? ""));
       }
   
       if (canEdit("Variants")) {
         ["storageRam","Storage"].forEach(k=>fd.append(k, data[k] ?? ""));
         fd.append("sellingPrice", Number(data.sellingPrice || 0));
         fd.append("variants", JSON.stringify(
           data.variants.map(v=>({ ...v, inputCost:Number(v.inputCost||0) }))
         ));
       }
   
       if (canEdit("Availability")) {
         ["availability","status","reorderLevel","productIdMode","productId"]
           .forEach(k=>fd.append(k, data[k] ?? ""));
       }
   
       if (canEdit("Description")) {
         fd.append("description", data.description || "");
         fd.append("features", JSON.stringify(data.features));
         data.images.forEach(f=>fd.append("images", f));
       }
   
       try {
         await api.post("/api/products", fd, { headers:{ "Content-Type":"multipart/form-data" }});
         toast.success("Product created");
         nav("/inventory");
       } catch (err) {
         toast.error(err.response?.data?.message || "Could not save product");
         console.error(err);
       }
     };
   
     /* ---- helpers for UI ---- */
     const SaveButtons = ({ first }) => first && canSave && (
       <div className="mt-6 flex gap-4">
         <button type="button" onClick={()=>nav(-1)}
                 className="rounded border border-orange-500 px-6 py-1.5 text-orange-500">
           Cancel
         </button>
         <button type="submit" disabled={isSubmitting}
                 className="rounded bg-orange-500 px-6 py-1.5 text-white disabled:opacity-60">
           {isSubmitting ? "Saving…" : "Save"}
         </button>
       </div>
     );
   
     const Block = ({ title, body, first=false, children }) => (
       <section className={`${first?"":"pt-16"} grid gap-8 md:grid-cols-[260px_1fr]`}>
         <div>
           <h3 className="text-[17px] font-semibold">{title}</h3>
           <p className="mt-1 text-sm leading-5 text-gray-600">{body}</p>
           <SaveButtons first={first}/>
         </div>
         <div className="space-y-8">{children}</div>
       </section>
     );
   
     /* disabled flags */
     const disGen  = !canEdit("General");
     const disVar  = !canEdit("Variants");
     const disAv   = !canEdit("Availability");
     const disDesc = !canEdit("Description");
   
     /* ---- UI ---- */
     return (
       <form onSubmit={handleSubmit(onSubmit)}
             className="mx-auto max-w-[1150px] px-4 sm:px-6 pb-32">
   
         {/*──────── GENERAL ────────*/}
         <Block {...META[0]} first>
           {/* row 1 */}
           <div className="grid gap-6 sm:grid-cols-2">
             <L label="Product Name">
               <input {...register("productName",{ required:"Product name is required" })}
                      className="input" disabled={disGen}/>
             </L>
             <L label="Product Condition">
               <select {...register("productCondition",{ required:true })} className="input" disabled={disGen}>
                 <option value="" disabled hidden>Select condition</option>
                 <option>New</option><option>UK Used</option><option>Fairly Used</option>
               </select>
             </L>
           </div>
   
           {/* row 2 */}
           <div className="grid gap-6 sm:grid-cols-2">
             <L label="Brand">
               <select {...register("brand",{ required:"Brand required" })} className="input" disabled={disGen}>
                 <option value="" disabled hidden>Select brand</option>
                 <option>Dell</option><option>HP</option><option>Lenovo</option>
               </select>
             </L>
             <L label="Product Category">
               <select {...register("productCategory",{ required:"Category required" })}
                       className="input" disabled={disGen}>
                 <option value="" disabled hidden>Select category</option>
                 <option>Laptops</option><option>Monitor</option><option>Accessories</option>
               </select>
             </L>
           </div>
   
           <L label="Product Quantity">
             <input type="number" min="1" {...register("quantity",{ valueAsNumber:true })}
                    className="input" disabled={disGen}/>
           </L>
   
           {/* row 3 */}
           <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-4">
             <L label="Base RAM">
               <select {...register("baseRam")} className="input" disabled={disGen}>
                 <option value="" disabled hidden>Select RAM</option>
                 <option>8GB</option><option>16GB</option><option>32GB</option>
               </select>
             </L>
             <L label="Base Storage">
               <select {...register("baseStorage")} className="input" disabled={disGen}>
                 <option value="" disabled hidden>Select Storage</option>
                 <option>256GB</option><option>512GB</option><option>1TB</option>
               </select>
             </L>
             <L label="Base CPU / Processor">
               <select {...register("baseCPU")} className="input" disabled={disGen}>
                 <option value="" disabled hidden>Select CPU</option>
                 <option>Core i3</option><option>Core i5</option><option>Core i7</option>
               </select>
             </L>
             <L label="Serial Number">
               <input {...register("serialNumbers")} placeholder="SN-12345" className="input" disabled={disGen}/>
             </L>
           </div>
   
           {/* row 4 */}
           <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
             <L label="Cost Price per Unit">
               <input {...register("costPrice",{ valueAsNumber:true, required:true })}
                      className="input" disabled={disGen}/>
             </L>
             <L label="Stock Location">
               <select {...register("stockLocation")} className="input" disabled={disGen}>
                 <option value="" disabled hidden>Select location</option>
                 <option>Warehouse A</option><option>Component 180</option>
               </select>
             </L>
             <L label="Supplier Name">
               <input {...register("supplier")} className="input" disabled={disGen}/>
             </L>
           </div>
         </Block>
   
         <Divider/>
   
         {/*──────── VARIANTS ────────*/}
         <Block {...META[1]}>
           <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
             <L label="Variant RAM">
               <select {...register("storageRam")} className="input" disabled={disVar}>
                 <option value="" disabled hidden>Select RAM</option>
                 <option>8GB</option><option>16GB</option><option>32GB</option>
               </select>
             </L>
             <L label="Variant Storage">
               <select {...register("Storage")} className="input" disabled={disVar}>
                 <option value="" disabled hidden>Select Storage</option>
                 <option>256GB</option><option>512GB</option><option>1TB</option>
               </select>
             </L>
             <L label="Selling Price (NGN)">
               <input {...register("sellingPrice",{ valueAsNumber:true, required:"Selling price required" })}
                      className="input" disabled={disVar}/>
             </L>
           </div>
   
           <div className="flex items-center justify-between mt-6">
             <h4 className="font-medium"/>
             {canEdit("Variants") && (
               <button type="button"
                       onClick={()=>addVariant({ attribute:"", value:"", inputCost:"" })}
                       className="text-sm font-medium text-orange-500">
                + Add Variants
               </button>
             )}
           </div>
   
           {variantF.map((v,idx)=>(
             <div key={v.id} className="mb-4 grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
               <L label="Attribute">
                 <input {...register(`variants.${idx}.attribute`)} className="input"
                        placeholder="e.g. Colour" disabled={disVar}/>
               </L>
               <L label="Value">
                 <input {...register(`variants.${idx}.value`)} className="input"
                        placeholder="e.g. Black" disabled={disVar}/>
               </L>
               <L label="Input Cost">
                 <input {...register(`variants.${idx}.inputCost`,{ valueAsNumber:true })} className="input"
                        placeholder="0" disabled={disVar}/>
               </L>
             </div>
           ))}
         </Block>
   
         <Divider/>
   
         {/*──────── AVAILABILITY ────────*/}
         <Block {...META[2]}>
           <L label="Stock Status">
             <div className="flex flex-wrap gap-8 pt-1">
               {AVAIL.map(o=>(
                 <label key={o.id} className="flex items-center gap-2 text-sm">
                   <input type="radio" value={o.id} {...register("availability")}
                          className="accent-orange-500" disabled={disAv}/>
                   {o.label}
                 </label>
               ))}
             </div>
           </L>
   
           <div className="grid gap-1">
             <div className="grid gap-6 sm:grid-cols-[1fr_120px]">
               <L label="Product Status">
                 <select {...register("status")} className="input" disabled={disAv}>
                   <option>Status</option><option>Incoming</option><option>Archived</option>
                 </select>
               </L>
               <L label="Re-order Level">
                 <input type="number" {...register("reorderLevel",{ valueAsNumber:true })}
                        className="input" disabled={disAv}/>
               </L>
             </div>
             <p className="hidden sm:block text-xs text-gray-400">
               (Low stock alert when stock is less than)
             </p>
           </div>
   
           <div className="grid sm:grid-cols-[160px_1fr] md:grid-cols-[180px_1fr] gap-0.5">
             <select {...register("productIdMode")} className="input rounded-r-none" disabled={disAv}>
               <option>Autogenerated</option><option>Manual</option>
             </select>
             <input {...register("productId",{ required:pidMode==="Manual" })}
                    disabled={pidMode==="Autogenerated" || disAv}
                    placeholder={pidMode==="Autogenerated" ? "Generated automatically" : "Enter product ID"}
                    className="input rounded-l-none"/>
           </div>
         </Block>
   
         <Divider/>
   
         {/*──────── DESCRIPTION & FEATURES ────────*/}
         <Block {...META[3]}>
           <L label="Upload Product Image">
             <label className="flex w-full items-center gap-2 rounded border px-4 py-2 text-sm cursor-pointer">
               <FiUpload/> Upload image
               <input type="file" multiple className="hidden"
                      onChange={e=>addImages(Array.from(e.target.files))}
                      disabled={disDesc}/>
             </label>
             <span className="mt-1 text-xs text-gray-400">
               Upload png / jpeg — {watch("images").length} selected
             </span>
           </L>
   
           <L label="Product Details">
             <textarea rows={3} {...register("description")}
                       placeholder="Enter a description..." className="input resize-none" disabled={disDesc}/>
           </L>
   
          
         </Block>
   
         {/* validation summary */}
         {canSave && Object.keys(errors).length>0 && (
           <div className="mt-10 rounded border border-red-200 bg-red-50 p-3 text-sm text-red-700">
             {Object.values(errors).map((e,i)=><p key={i}>• {e.message}</p>)}
           </div>
         )}
       </form>
     );
   }
   