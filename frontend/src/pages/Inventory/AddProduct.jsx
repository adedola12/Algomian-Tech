/* ────────────────────────────────────────────────────────────
   AddProduct.jsx • Tailwind CSS 3 + react-hook-form 7
   ──────────────────────────────────────────────────────────── */
import { Fragment, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useForm, useFieldArray } from "react-hook-form";
import { Dialog, Transition } from "@headlessui/react";
import { toast } from "react-toastify";
import { FiUpload } from "react-icons/fi";
import api from "../../api";

/*── constants ─*/
const AVAIL = [
  { id: "inStock", label: "In-stock" },
  { id: "restocking", label: "Restocking soon" },
  { id: "inactive", label: "Mark as inactive" },
];

const META = [
  { title: "General", body: "Add information about the product here." },
  {
    title: "Product Variants",
    body: "For products with variables, such as size, colour or specs to manage their inventory levels.",
  },
  {
    title: "Product availability",
    body: "Edit inventory levels to better help you manage inventory",
  },
  {
    title: "Product Descriptions & Features",
    body: "Add attributes for this product to create and manage their inventory.",
  },
];

/*── component ─*/
export default function AddProduct() {
  const nav = useNavigate();

  const {
    register,
    handleSubmit,
    watch,
    control,
    setValue,
    getValues,
    formState: { errors, isSubmitting },
  } = useForm({
    mode: "onTouched",
    defaultValues: {
      productName: "",
      productCategory: "",
      brand: "",
      baseRam: "",
      baseStorage: "",
      baseCPU: "",
      costPrice: "",
      sellingPrice: "",
      quantity: 1,
      availability: "inStock",
      status: "Status",
      reorderLevel: 10,
      stockLocation: "",
      productIdMode: "Autogenerated", // NEW select left part
      productId: "", // right field
      supplier: "",
      description: "",
      serialNumbers: ["", "", "", "", ""],
      variants: [{ attribute: "", value: "", inputCost: "" }],
      features: [{ key: "", value: "" }],
      images: [],
    },
  });

  /* field arrays */
  const { fields: variantF, append: addVariant } = useFieldArray({
    control,
    name: "variants",
  });
  const { fields: featureF, append: addFeature } = useFieldArray({
    control,
    name: "features",
  });
  const { fields: serialF } = useFieldArray({ control, name: "serialNumbers" });

  /* images */
  const addImages = (files) =>
    setValue("images", [...getValues("images"), ...files]);

  /* disable productId input when Autogenerated */
  const pidMode = watch("productIdMode");
  useEffect(() => {
    if (pidMode === "Autogenerated") setValue("productId", "");
  }, [pidMode, setValue]);

  /* submit */
  const onSubmit = async (data) => {
    const fd = new FormData();

    /* scalar */
    [
      "productName",
      "productCategory",
      "brand",
      "baseRam",
      "baseStorage",
      "baseCPU",
      "availability",
      "status",
      "stockLocation",
      "productId",
      "description",
      "supplier",
    ].forEach((k) => fd.append(k, data[k]));

    fd.append("sellingPrice", Number(data.sellingPrice || 0));
    fd.append("costPrice", Number(data.costPrice || 0));
    fd.append("quantity", Number(data.quantity || 0));
    fd.append("reorderLevel", Number(data.reorderLevel || 0));

    fd.append("serialNumbers", JSON.stringify(data.serialNumbers));
    fd.append("features", JSON.stringify(data.features));
    fd.append(
      "variants",
      JSON.stringify(
        data.variants.map((v) => ({
          ...v,
          inputCost: Number(v.inputCost || 0),
        }))
      )
    );

    data.images.forEach((f) => fd.append("images", f));

    try {
      await api.post("/api/products", fd, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      toast.success("Product created");
      nav("/inventory");
    } catch (err) {
      toast.error(err.response?.data?.message || "Could not save product");
      console.error(err);
    }
  };

  /* reusable block */
  const Block = ({ title, body, children, first }) => (
    <section
      className={`${first ? "" : "pt-16"} grid grid-cols-[260px_1fr] gap-10`}
    >
      <div>
        <h3 className="text-[17px] font-semibold">{title}</h3>
        <p className="mt-1 text-sm leading-5 text-gray-600">{body}</p>

        {first && (
          <div className="mt-6 flex gap-4">
            <button
              type="button"
              onClick={() => nav(-1)}
              className="rounded border border-orange-500 px-6 py-1.5 text-orange-500"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className="rounded bg-orange-500 px-6 py-1.5 text-white disabled:opacity-60"
            >
              {isSubmitting ? "Saving…" : "Save"}
            </button>
          </div>
        )}
      </div>
      <div className="space-y-8">{children}</div>
    </section>
  );

  /*── UI ─*/
  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className="mx-auto max-w-[1150px] px-6 pb-40"
    >
      {/*──────── GENERAL ────────*/}
      <Block {...META[0]} first>
        <input
          {...register("productName", { required: "Product name is required" })}
          placeholder="Enter product name"
          className="input"
        />

        <div className="grid gap-6 md:grid-cols-2">
          <select
            {...register("brand", { required: "Brand required" })}
            className="input"
          >
            <option value="" disabled hidden>
              Enter brand name
            </option>
            <option>Dell</option>
            <option>HP</option>
          </select>
          <select
            {...register("productCategory", { required: "Category required" })}
            className="input"
          >
            <option value="" disabled hidden>
              Enter product category
            </option>
            <option>Laptops</option>
            <option>Monitor</option>
            <option>Accessories</option>
          </select>
        </div>

        {/* specs */}
        <div className="grid gap-6 md:grid-cols-3">
          {["baseRam", "baseStorage", "baseCPU"].map((k) => (
            <select key={k} {...register(k)} className="input">
              <option value="" disabled hidden>
                {k === "baseRam"
                  ? "Base Ram"
                  : k === "baseStorage"
                  ? "Base Storage"
                  : "Base CPU/Processor"}
              </option>
              <option>8GB</option>
              <option>16GB</option>
              <option>32GB</option>
            </select>
          ))}
        </div>

        {/* prices */}
        <div className="grid gap-6 md:grid-cols-2">
          <input
            {...register("costPrice", { valueAsNumber: true })}
            placeholder="Enter Cost Price per Unit (NGN)"
            className="input"
          />
          <input
            {...register("sellingPrice", {
              required: "Selling price required",
              valueAsNumber: true,
            })}
            placeholder="Enter Selling Price per Unit (NGN)"
            className="input"
          />
        </div>

        <input
          type="number"
          {...register("quantity", { valueAsNumber: true })}
          placeholder="Enter Product quantity"
          className="input"
        />

        {/* Serial Number(s) – 5 lines, two-column layout */}
        <div className="rounded border bg-white p-4">
          <p className="font-medium mb-3">Serial Number(s)</p>

          {/* grid: 2 columns on ≥640 px, one column on mobile */}
          <div className="grid gap-y-3 gap-x-8 sm:grid-cols-2">
            {[0, 1, 2, 3, 4].map((idx) => (
              <div key={idx} className="flex items-center gap-2">
                <span className="w-4 text-xs text-gray-400">{idx + 1}</span>
                <input
                  {...register(`serialNumbers.${idx}`)}
                  placeholder="Enter Serial number"
                  className="input flex-1"
                />
              </div>
            ))}
          </div>
        </div>
        <input
          {...register("supplier")}
          placeholder="Enter supplier name"
          className="input"
        />
      </Block>

      {/*──────── VARIANTS ────────*/}
      <Block {...META[1]}>
        <div className="flex items-center justify-between">
          <h4 className="font-medium">Product Variants</h4>
          <button
            type="button"
            onClick={() =>
              addVariant({ attribute: "", value: "", inputCost: "" })
            }
            className="text-sm font-medium text-orange-500"
          >
            Add Variants
          </button>
        </div>

        {variantF.map((v, idx) => (
          <div key={v.id} className="grid grid-cols-3 gap-4 mb-4">
            <input
              {...register(`variants.${idx}.attribute`)}
              placeholder="Attribute (e.g. ram)"
              className="input"
            />
            <input
              {...register(`variants.${idx}.value`)}
              placeholder="Value (e.g. 8GB)"
              className="input"
            />
            <input
              {...register(`variants.${idx}.inputCost`, {
                valueAsNumber: true,
              })}
              placeholder="Input cost"
              className="input"
            />
          </div>
        ))}
      </Block>

      {/*──────── AVAILABILITY ────────*/}
      <Block {...META[2]}>
        <div>
          <label className="form-label">Stock Status</label>
          <div className="flex flex-wrap gap-8">
            {AVAIL.map((o) => (
              <label key={o.id} className="flex items-center gap-2 text-sm">
                <input
                  type="radio"
                  value={o.id}
                  {...register("availability")}
                  className="accent-orange-500"
                />
                {o.label}
              </label>
            ))}
          </div>
        </div>

        {/* status w/helper */}
        <div className="grid gap-1">
          <div className="grid gap-6 md:grid-cols-[1fr_120px]">
            <select {...register("status")} className="input">
              <option>Status</option>
              <option>Incoming</option>
              <option>Archived</option>
            </select>
            <input
              type="number"
              {...register("reorderLevel", { valueAsNumber: true })}
              className="input"
            />
          </div>
          <p className="text-xs text-gray-400">
            (Low stock alert when stock is less than)
          </p>
        </div>

        <select {...register("stockLocation")} className="input">
          <option value="" disabled hidden>
            Enter product category
          </option>
          <option>Component 180</option>
          <option>Warehouse A</option>
        </select>

        {/* Product ID split */}
        <div className="grid md:grid-cols-[180px_1fr] gap-0.5">
          <select
            {...register("productIdMode")}
            className="input rounded-r-none"
          >
            <option>Autogenerated</option>
            <option>Manual</option>
          </select>
          <input
            {...register("productId", { required: pidMode === "Manual" })}
            disabled={pidMode === "Autogenerated"}
            placeholder={
              pidMode === "Autogenerated"
                ? "Generated automatically"
                : "Enter product ID"
            }
            className="input rounded-l-none"
          />
        </div>
      </Block>

      {/*──────── DESC & FEATURES ────────*/}
      <Block {...META[3]}>
        <div>
          <label className="form-label block">Upload Product Image</label>
          <label className="flex items-center gap-2 rounded border px-4 py-2 text-sm cursor-pointer">
            <FiUpload /> Upload image
            <input
              type="file"
              multiple
              className="hidden"
              onChange={(e) => addImages(Array.from(e.target.files))}
            />
          </label>
          <p className="mt-1 text-xs text-gray-400">
            Upload image in png, jpeg — {watch("images").length} selected
          </p>
        </div>

        <textarea
          rows={3}
          {...register("description")}
          placeholder="Enter a description..."
          className="input resize-none"
        />

        <div className="flex items-center justify-between mb-1">
          <h4 className="font-medium">Features</h4>
          <button
            type="button"
            onClick={() => addFeature({ key: "", value: "" })}
            className="text-sm font-medium text-orange-500"
          >
            + Add specifications
          </button>
        </div>

        {featureF.map((f, i) => (
          <div key={f.id} className="mb-3 grid gap-4 md:grid-cols-2">
            <input
              {...register(`features.${i}.key`)}
              placeholder="Attribute (e.g. RAM)"
              className="input"
            />
            <input
              {...register(`features.${i}.value`)}
              placeholder="Value (e.g. 8GB)"
              className="input"
            />
          </div>
        ))}
      </Block>

      {/* validation summary */}
      {Object.keys(errors).length > 0 && (
        <div className="mt-10 rounded border border-red-200 bg-red-50 p-3 text-sm text-red-700">
          {Object.values(errors).map((e, i) => (
            <p key={i}>• {e.message}</p>
          ))}
        </div>
      )}
    </form>
  );
}
